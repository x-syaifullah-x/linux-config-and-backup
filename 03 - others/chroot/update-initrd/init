#!/bin/sh
export PATH=/sbin:/usr/sbin:/bin:/usr/bin
[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc
export quiet=y
mount -t devtmpfs -o nosuid,mode=0755,size=0 udev /dev
[ ! -h /dev/fd ] && ln -s /proc/self/fd /dev/fd
[ ! -h /dev/stdin ] && ln -s /proc/self/fd/0 /dev/stdin
[ ! -h /dev/stdout ] && ln -s /proc/self/fd/1 /dev/stdout
[ ! -h /dev/stderr ] && ln -s /proc/self/fd/2 /dev/stderr
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true
export DPKG_ARCH=
. /conf/arch.conf
export MODPROBE_OPTIONS="-qb"
export ROOT=
export ROOTDELAY=
export ROOTFLAGS=
export ROOTFSTYPE=
export IP=
export DEVICE=
export BOOT=
export BOOTIF=
export UBIMTD=
export break=
export init=/sbin/init
export readonly=y
export rootmnt=/root
export debug=
export panic=
export blacklist=
export resume=
export resume_offset=
export noresume=
export drop_caps=
export fastboot=n
export forcefsck=n
export fsckfix=
. /conf/initramfs.conf
for conf in conf/conf.d/*; do
	[ -f "${conf}" ] && . "${conf}"
done
. /scripts/functions
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		init=${x#init=}
		;;
	root=*)
		ROOT=${x#root=}
		if [ -z "${BOOT}" ] && [ "$ROOT" = "/dev/nfs" ]; then
			BOOT=nfs
		fi
		;;
	rootflags=*)
		ROOTFLAGS="-o ${x#rootflags=}"
		;;
	rootfstype=*)
		ROOTFSTYPE="${x#rootfstype=}"
		;;
	rootdelay=*)
		ROOTDELAY="${x#rootdelay=}"
		case ${ROOTDELAY} in
		*[![:digit:].]*)
			ROOTDELAY=
			;;
		esac
		;;
	nfsroot=*)
		# shellcheck disable=SC2034
		NFSROOT="${x#nfsroot=}"
		;;
	initramfs.runsize=*)
		RUNSIZE="${x#initramfs.runsize=}"
		;;
	ip=*)
		IP="${x#ip=}"
		;;
	boot=*)
		BOOT=${x#boot=}
		;;
	ubi.mtd=*)
		UBIMTD=${x#ubi.mtd=}
		;;
	resume=*)
		RESUME="${x#resume=}"
		;;
	resume_offset=*)
		resume_offset="${x#resume_offset=}"
		;;
	noresume)
		noresume=y
		;;
	drop_capabilities=*)
		drop_caps="-d ${x#drop_capabilities=}"
		;;
	panic=*)
		panic="${x#panic=}"
		;;
	ro)
		readonly=y
		;;
	rw)
		readonly=n
		;;
	debug)
		debug=y
		quiet=n
		if [ -n "${netconsole}" ]; then
			log_output=/dev/kmsg
		else
			log_output=/run/initramfs/initramfs.debug
		fi
		set -x
		;;
	debug=*)
		debug=y
		quiet=n
		set -x
		;;
	break=*)
		break=${x#break=}
		;;
	break)
		break=premount
		;;
	blacklist=*)
		blacklist=${x#blacklist=}
		;;
	netconsole=*)
		netconsole=${x#netconsole=}
		[ "$debug" = "y" ] && log_output=/dev/kmsg
		;;
	BOOTIF=*)
		BOOTIF=${x#BOOTIF=}
		;;
	fastboot|fsck.mode=skip)
		fastboot=y
		;;
	forcefsck|fsck.mode=force)
		forcefsck=y
		;;
	fsckfix|fsck.repair=yes)
		fsckfix=y
		;;
	fsck.repair=no)
		fsckfix=n
		;;
	esac
done
if [ -z "${BOOT}" ]; then
	BOOT=local
fi
if [ -n "${noresume}" ] || [ "$RESUME" = none ]; then
	noresume=y
else
	resume=${RESUME:-}
fi
mount -t tmpfs -o "noatime,nodiratime,nodev,noexec,nosuid,size=${RUNSIZE:-10%},mode=0755" tmpfs /run
mkdir -m 0700 /run/initramfs
if [ -n "$log_output" ]; then
	exec >"$log_output" 2>&1
	unset log_output
fi
maybe_break top
run_scripts /scripts/init-top
maybe_break modules
[ "$quiet" != "y" ] && log_begin_msg "Loading essential drivers"
[ -n "${netconsole}" ] && /sbin/modprobe netconsole netconsole="${netconsole}"
load_modules
[ "$quiet" != "y" ] && log_end_msg
starttime="$(_uptime)"
starttime=$((starttime + 1)) # round up
export starttime
if [ "$ROOTDELAY" ]; then
	sleep "$ROOTDELAY"
fi
maybe_break premount
[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-premount"
run_scripts /scripts/init-premount
[ "$quiet" != "y" ] && log_end_msg
maybe_break mount
log_begin_msg "Mounting root file system"
. /scripts/local
. /scripts/nfs
. "/scripts/${BOOT}"
parse_numeric "${ROOT}"
maybe_break mountroot
mount_top
mount_premount
mountroot
log_end_msg
if read_fstab_entry /usr; then
	log_begin_msg "Mounting /usr file system"
	mountfs /usr
	log_end_msg
fi
mount_bottom
nfs_bottom
local_bottom
maybe_break bottom
[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-bottom"
run_scripts /scripts/init-bottom
[ "$quiet" != "y" ] && log_end_msg
mount -n -o move /run ${rootmnt}/run
validate_init() {
	run-init -n "${rootmnt}" "${1}"
}
if ! validate_init "$init"; then
	echo "Target filesystem doesn't have requested ${init}."
	init=
	for inittest in /sbin/init /etc/init /bin/init /bin/sh; do
		if validate_init "${inittest}"; then
			init="$inittest"
			break
		fi
	done
fi
if ! validate_init "${init}" ; then
	panic "No init found. Try passing init= bootarg."
fi
maybe_break init
unset debug
unset MODPROBE_OPTIONS
unset DPKG_ARCH
unset ROOTFLAGS
unset ROOTFSTYPE
unset ROOTDELAY
unset ROOT
unset IP
unset BOOT
unset BOOTIF
unset DEVICE
unset UBIMTD
unset blacklist
unset break
unset noresume
unset panic
unset quiet
unset readonly
unset resume
unset resume_offset
unset noresume
unset fastboot
unset forcefsck
unset fsckfix
unset starttime
mount -n -o move /sys ${rootmnt}/sys
mount -n -o move /proc ${rootmnt}/proc

OVERLAY_DIR=$rootmnt/run/x-overlay
modprobe overlay || exit $?
for _dir in boot etc home media mnt opt root srv usr var; do
	LOWER_DIR=$rootmnt/$_dir
 	UPPER_DIR=$OVERLAY_DIR/upper_dir/$_dir
	WORK_DIR=$OVERLAY_DIR/work_dir/$_dir
	mkdir -m 0755 -p $UPPER_DIR $WORK_DIR || exit $?
	TARGET_DIR=$rootmnt/$_dir
	mount -t overlay -o rw,noatime,nodiratime,lowerdir=$LOWER_DIR,upperdir=$UPPER_DIR,workdir=$WORK_DIR,uuid=on overlay $TARGET_DIR || exit $?
done
mount -t ramfs -o rw,nodiratime,nosuid,nodev,noatime,mode=1777 ramfs $rootmnt/tmp
cat << EOF_INTEL_BACKLIGHT_RULES > $rootmnt/etc/udev/rules.d/intel_backlight.rules
SUBSYSTEM=="backlight", ACTION=="add", KERNEL=="intel_backlight", ATTR{max_brightness}=="4438", ATTR{brightness}="500", RUN+="/bin/rm -rf /etc/udev/rules.d/intel_backlight.rules"
EOF_INTEL_BACKLIGHT_RULES

cat << "EOF_ADB_USB_RULES_SH" > $rootmnt/bin/adb_usb_rules.sh
#!/bin/sh
_PATH="/sys$1"
_DATA="$(ls -A $_PATH)"
_RULES_NAME="$(echo "$_PATH" | md5sum | cut -f1 -d" ").rules"
if [ -z "$_DATA" ]; then
  _RULES_FILE=/etc/udev/rules.d/$_RULES_NAME
  if [ -f $_RULES_FILE ]; then
    rm -rf $_RULES_FILE
    udevadm control --reload-rules
    udevadm trigger --subsystem-match $_PATH
  fi
else
  _CONFIGURATION="$(cat $_PATH/configuration)"
  case "$_CONFIGURATION" in
    *adb*)
      for i in $(ls -A $_PATH); do
        case "$i" in
          idProduct)
            ID_PRODUCT=$(cat $_PATH/$i)
            ;;
          idVendor)
            ID_VENDOR=$(cat $_PATH/$i)
            ;;
        esac
      done
      echo "SUBSYSTEM==\"usb\", ATTR{idVendor}==\"$ID_VENDOR\", ATTR{idProduct}==\"$ID_PRODUCT\", MODE=\"0666\", GROUP=\"plugdev\"" > /etc/udev/rules.d/$_RULES_NAME
      udevadm control --reload-rules
      udevadm trigger --subsystem-match $_PATH
    ;;
  esac
fi
EOF_ADB_USB_RULES_SH
cat << "EOF_ADB_USB_RULES" > $rootmnt/etc/udev/rules.d/adb_usb.rules
ACTION=="add|remove" SUBSYSTEM=="usb", RUN+="/bin/sh /bin/adb_usb_rules.sh $env{DEVPATH}"
EOF_ADB_USB_RULES
exec run-init ${drop_caps} "${rootmnt}" "${init}" "$@" <"${rootmnt}/dev/console" >"${rootmnt}/dev/console" 2>&1
echo "Something went badly wrong in the initramfs."
panic "Please file a bug on initramfs-tools."